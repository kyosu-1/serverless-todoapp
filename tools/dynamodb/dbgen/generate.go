package main

import (
	"bytes"
	"text/template"
)

const dtotemp = `// Code generated by cmd/tools/dtogen; DO NOT EDIT.
package dto
import (
	{{ if or .HasGSI2H .HasGSI3H -}} "fmt" {{- end}}
	"strconv"
	"time"
	"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/nagaseengineer/todai-tokushin-server/app/model"
)
const EntityType{{ .ModelName }} = "{{ .EntityType }}"
type {{ .ModelName }}DTO struct {
	*model.{{ .ModelName }}
}
func (d *{{ .ModelName }}DTO) ID() string {
	return d.{{ .ModelName }}.{{ .IDFieldName }}
}
func (d *{{ .ModelName }}DTO) EntityType() string {
	return EntityType{{ .ModelName }}
}
{{ if .HasGSI2 -}}
func (d *{{ .ModelName }}DTO) GetGSI2HashKey() string {
	return {{ .RenderGSI2HKFunc }}
}
func (d *{{ .ModelName }}DTO) GetGSI2SortKey() string {
	return {{ .RenderGSI2SKeyField}}
}
{{ end }}
{{ if .HasGSI3 -}}
func (d *{{ .ModelName }}DTO) GetGSI3HashKey() string {
	return {{ .RenderGSI3HKFunc }}
}
func (d *{{ .ModelName }}DTO) GetGSI3SortKey() string {
	return {{ .RenderGSI3SKeyField}}
}
{{ end }}
{{ if .HasGSI4 -}}
func (d *{{ .ModelName }}DTO) GetGSI4HashKey() string {
	return {{ .RenderGSI4HKFunc }}
}
func (d *{{ .ModelName }}DTO) GetGSI4SortKey() string {
	return {{ .RenderGSI4SKeyField}}
}
{{ end }}
{{ if .HasGSI5 -}}
func (d *{{ .ModelName }}DTO) GetGSI5HashKey() string {
	return {{ .RenderGSI5HKFunc }}
}
func (d *{{ .ModelName }}DTO) GetGSI5SortKey() string {
	return {{ .RenderGSI5SKeyField}}
}
{{ end }}
{{ if .HasGSI6 -}}
func (d *{{ .ModelName }}DTO) GetGSI6HashKey() string {
	return {{ .RenderGSI6HKFunc }}
}
func (d *{{ .ModelName }}DTO) GetGSI6SortKey() string {
	return {{ .RenderGSI6SKeyField}}
}
{{ end }}
func (d *{{ .ModelName }}DTO) Items() (map[string]types.AttributeValue, error) {
	item, err := attributevalue.MarshalMap(d.{{ .ModelName }})
	if err != nil {
		return nil, err
	}
	item[Attr_ID] = &types.AttributeValueMemberS{
		Value: d.ID(),
	}
	item[Attr_EntityType] = &types.AttributeValueMemberS{
		Value: d.EntityType(),
	}
	item["system_UpdatedAt"] = &types.AttributeValueMemberN{
		Value: strconv.Itoa(int(time.Now().Unix())),
	}
	item["system_version"] = &types.AttributeValueMemberS{
		Value: "v1",
	}
	{{ if .HasGSI2 -}}
	item[Attr_GSI2HKey] = &types.AttributeValueMemberS{
		Value: d.GetGSI2HashKey(),
	}
	item[Attr_GSI2SKey] = &types.AttributeValueMemberS{
		Value: d.GetGSI2SortKey(),
	}
	{{ end -}}
	{{ if .HasGSI3 -}}
	item[Attr_GSI3HKey] = &types.AttributeValueMemberS{
		Value: d.GetGSI3HashKey(),
	}
	item[Attr_GSI3SKey] = &types.AttributeValueMemberS{
		Value: d.GetGSI3SortKey(),
	}
	{{ end -}}
	{{ if .HasGSI4 -}}
	item[Attr_GSI4HKey] = &types.AttributeValueMemberS{
		Value: d.GetGSI4HashKey(),
	}
	item[Attr_GSI4SKey] = &types.AttributeValueMemberS{
		Value: d.GetGSI4SortKey(),
	}
	{{ end -}}
	{{ if .HasGSI5 -}}
	item[Attr_GSI5HKey] = &types.AttributeValueMemberS{
		Value: d.GetGSI5HashKey(),
	}
	item[Attr_GSI5SKey] = &types.AttributeValueMemberS{
		Value: d.GetGSI5SortKey(),
	}
	{{ end -}}
	{{ if .HasGSI6 -}}
	item[Attr_GSI6HKey] = &types.AttributeValueMemberS{
		Value: d.GetGSI6HashKey(),
	}
	item[Attr_GSI6SKey] = &types.AttributeValueMemberS{
		Value: d.GetGSI6SortKey(),
	}
	{{ end -}}
	return item, nil
}
func Restore{{ .ModelName }}(m map[string]types.AttributeValue) (*model.{{ .ModelName }}, error) {
	d := new(model.{{ .ModelName }})
	if err := attributevalue.UnmarshalMap(m, d); err != nil {
		return nil, err
	}
	return d, nil
}
type {{ .ModelName }}Iterator struct {
	data []*model.{{ .ModelName }}
}
func (i *{{ .ModelName }}Iterator) Iterate(item map[string]types.AttributeValue) error {
	v, err := Restore{{ .ModelName }}(item)
	if err != nil {
		return err
	}
	i.data = append(i.data, v)
	return nil
}
func (i *{{ .ModelName }}Iterator) Models() []*model.{{ .ModelName }} {
	return i.data
}
`

func generateDTO(m *model) (string, error) {
	t, err := template.New("dto").Parse(dtotemp)
	if err != nil {
		return "", err
	}
	buf := bytes.NewBuffer(make([]byte, 0, 1024))
	if err := t.Execute(buf, m); err != nil {
		return "", err
	}
	return buf.String(), nil
}
