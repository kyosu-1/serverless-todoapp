// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/labstack/echo/v4"
)

// Defines values for Status.
const (
	Done Status = "done"
	Todo Status = "todo"
)

// Status of the task
type Status string

// Tag defines model for Tag.
type Tag struct {
	// ID of the tag
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name of the tag
	Name *string `json:"name,omitempty"`
}

// Task defines model for Task.
type Task struct {
	// Description of the task
	Description *string `json:"description,omitempty"`

	// Due date of the task
	DueDate *time.Time `json:"due_date,omitempty"`

	// ID of the task
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Status of the task
	Status *Status `json:"status,omitempty"`

	// tags of the task
	Tags *[]Tag `json:"tags,omitempty"`

	// Title of the task
	Title *string `json:"title,omitempty"`
}

// TagId defines model for tag_id.
type TagId = openapi_types.UUID

// TaskId defines model for task_id.
type TaskId = openapi_types.UUID

// PostTagsJSONBody defines parameters for PostTags.
type PostTagsJSONBody = Tag

// PutTagsTagIdJSONBody defines parameters for PutTagsTagId.
type PutTagsTagIdJSONBody = Tag

// GetTasksParams defines parameters for GetTasks.
type GetTasksParams struct {
	Status *GetTasksParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetTasksParamsStatus defines parameters for GetTasks.
type GetTasksParamsStatus string

// PostTasksJSONBody defines parameters for PostTasks.
type PostTasksJSONBody = Task

// PutTasksTaskIdJSONBody defines parameters for PutTasksTaskId.
type PutTasksTaskIdJSONBody = Task

// PostTagsJSONRequestBody defines body for PostTags for application/json ContentType.
type PostTagsJSONRequestBody = PostTagsJSONBody

// PutTagsTagIdJSONRequestBody defines body for PutTagsTagId for application/json ContentType.
type PutTagsTagIdJSONRequestBody = PutTagsTagIdJSONBody

// PostTasksJSONRequestBody defines body for PostTasks for application/json ContentType.
type PostTasksJSONRequestBody = PostTasksJSONBody

// PutTasksTaskIdJSONRequestBody defines body for PutTasksTaskId for application/json ContentType.
type PutTasksTaskIdJSONRequestBody = PutTasksTaskIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// health check
	// (GET /_health)
	GetHealth(ctx echo.Context) error
	// Get all categories
	// (GET /tags)
	GetTags(ctx echo.Context) error
	// Add a new tag
	// (POST /tags)
	PostTags(ctx echo.Context) error
	// Delete a tag
	// (DELETE /tags/{tag_id})
	DeleteTagsTagId(ctx echo.Context, tagId TagId) error
	// Update a tag
	// (PUT /tags/{tag_id})
	PutTagsTagId(ctx echo.Context, tagId TagId) error
	// Get all tasks
	// (GET /tasks)
	GetTasks(ctx echo.Context, params GetTasksParams) error
	// Add a new task
	// (POST /tasks)
	PostTasks(ctx echo.Context) error
	// Delete a task
	// (DELETE /tasks/{task_id})
	DeleteTasksTaskId(ctx echo.Context, taskId TaskId) error
	// Update a task
	// (PUT /tasks/{task_id})
	PutTasksTaskId(ctx echo.Context, taskId TaskId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTags(ctx)
	return err
}

// PostTags converts echo context to params.
func (w *ServerInterfaceWrapper) PostTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTags(ctx)
	return err
}

// DeleteTagsTagId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTagsTagId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameterWithLocation("simple", false, "tag_id", runtime.ParamLocationPath, ctx.Param("tag_id"), &tagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTagsTagId(ctx, tagId)
	return err
}

// PutTagsTagId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTagsTagId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tag_id" -------------
	var tagId TagId

	err = runtime.BindStyledParameterWithLocation("simple", false, "tag_id", runtime.ParamLocationPath, ctx.Param("tag_id"), &tagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTagsTagId(ctx, tagId)
	return err
}

// GetTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetTasks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTasksParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTasks(ctx, params)
	return err
}

// PostTasks converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTasks(ctx)
	return err
}

// DeleteTasksTaskId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTasksTaskId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task_id" -------------
	var taskId TaskId

	err = runtime.BindStyledParameterWithLocation("simple", false, "task_id", runtime.ParamLocationPath, ctx.Param("task_id"), &taskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTasksTaskId(ctx, taskId)
	return err
}

// PutTasksTaskId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTasksTaskId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task_id" -------------
	var taskId TaskId

	err = runtime.BindStyledParameterWithLocation("simple", false, "task_id", runtime.ParamLocationPath, ctx.Param("task_id"), &taskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTasksTaskId(ctx, taskId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/_health", wrapper.GetHealth)
	router.GET(baseURL+"/tags", wrapper.GetTags)
	router.POST(baseURL+"/tags", wrapper.PostTags)
	router.DELETE(baseURL+"/tags/:tag_id", wrapper.DeleteTagsTagId)
	router.PUT(baseURL+"/tags/:tag_id", wrapper.PutTagsTagId)
	router.GET(baseURL+"/tasks", wrapper.GetTasks)
	router.POST(baseURL+"/tasks", wrapper.PostTasks)
	router.DELETE(baseURL+"/tasks/:task_id", wrapper.DeleteTasksTaskId)
	router.PUT(baseURL+"/tasks/:task_id", wrapper.PutTasksTaskId)

}
